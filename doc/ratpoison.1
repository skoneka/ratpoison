.TH RATPOISON 1 2008-06-15
\# This man page is free software; you can redistribute it and/or modify
\# it under the terms of the GNU General Public License as published by
\# the Free Software Foundation; either version 2, or (at your option)
\# any later version.
\#
\# This man page is distributed in the hope that it will be useful,
\# but WITHOUT ANY WARRANTY; without even the implied warranty of
\# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\# GNU General Public License for more details.
\#
\# You should have received a copy of the GNU General Public License
\# along with this software; see the file COPYING.  If not, write to
\# the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
\# Boston, MA 02111-1307 USA
.de command
.	ds command@tmp \fB\\$1\fP
.	nr command@space 1
.	shift
.	while \\n[.$] \{\
.		ie '\\$1'[' \{\
.			if ( \\n[command@space] == 1 ) .as command@tmp \& \&
.			as command@tmp [
.			nr command@space 0
.		\}
.		el .ie '\\$1']' \{\
.			as command@tmp ]
.			nr command@space 1
.		\}
.		el .ie '\\$1'|' \{\
.			as command@tmp |
.			nr command@space 0
.		\}
.		el .ie '\\$1'(' \{\
.			as command@tmp \& (\fB
.			nr command@space 0
.			shift
.			while !'\\$1')' \{\
.				ie '\\$1'|' .as command@tmp \fP|\fB\h'-1'
.				el \{\
.					if ( \\n[command@space] == 1 ) .as command@tmp \& \&
.					as command@tmp \\$1
.					nr command@space 1
.				\}
.				shift
.			\}
.			shift
.			as command@tmp \fP)
.			nr command@space 0
.		\}
.		el \{\
.			if ( \\n[command@space] == 1 ) .as command@tmp \& \&
.			as command@tmp \fI\\$1\fR
.			nr command@space 1
.		\}
.		shift
.	\}
\&\\*[command@tmp]
..
.de cmd
.TP
.command \\$@
.br
..
.de var
.TP
.command \\$@
.br
..
.SH NAME
ratpoison \- window manager without mouse dependency
.P
.SH SYNOPSIS
.B ratpoison \-\-help
|
.B \-\-version
.br
.B ratpoison
.RB [ \-d
.IR dpy ]
.RB [ \-s
.IR num ]
.RB [ \-f
.IR file ]
.br
.B ratpoison
.RB [ \-d
.IR dpy ]
.RB [ \-s
.IR num ]
.RB [ \-i ]
.B \-c
.IR command
.RB [ \-c
.I command
\&... ]
.SH DESCRIPTION
Ratpoison is a Window Manager without fat library
dependencies, fancy graphics or rat dependence.

The screen can be split into non-overlapping frames. All
windows are kept maximized inside their frames.

All interaction with the window manager is done through
keystrokes. ratpoison has a prefix map to minimize
key clobbering.
.SH OPTIONS
.TP
.B \-h, \-\-help
Show summary of options.
.TP
.B \-v, \-\-version
Show version of program.
.TP
.B \-d, \-\-display \fIdisplay\fP
Set the X display to use or send commands to.
.TP
.B \-s, \-\-screen \fInumber\fP
Only use the specified screen.
.TP
.B \-f, \-\-file \fIfilename\fP
Specify an alternate configuration file.
If this is not given, ratpoison will try
.B $HOME/.ratpoisonrc
and if that does not exist
.B /etc/ratpoisonrc
and execute each command when starting up.
.TP
.B \-i, \-\-interactive
Execute commands given with
.B \-c
or
.B \-\-command
in interactive mode.
That means it will behave exactly as if called with
.B C\-t :
like prompting for missing arguments and things like that.
.TP
.B \-c, \-\-command
Send ratpoison a command.
There must be a ratpoison instance
running as window manager for the given display/screen for
this to work.
Do not forget to quote the command if it contains
spaces.
For example:
.br
\fBratpoison \-c "echo hello world"\fP
.SH KEY BINDINGS
To avoid conflicts with other programs, all default ratpoison
key bindings start with an escape key, per default
.B C\-t
(read Control\-t).
Some important default key bindings:
.PP
.B C\-t ?\&
Show key bindings
.br
.B C\-t c
Start an X terminal
.br
.B C\-t n
Switch to next window
.br
.B C\-t p
Switch to previous window
.br
.B C\-t 1\fP|\fB2\fP|\fB3\fP|\fB4\fP|\fB5\fP|\fB6\fP|\fB7\fP|\fB8\fP|\fB9
Switch to window number 1|2|...
.br
.B C\-t k
Close the current window
.br
.B C\-t K
XKill the current application
.br
.B C\-t s\fP|\fBS
Split the current frame into two vertical|horizontal ones
.br
.B C\-t Tab\fP|\fBLeft\fP|\fBUp\fP|\fBRight\fP|\fBDown
Switch to the next|left|top|right|bottom frame.
.br
.B C\-t Q
Make the current frame the only one
.br
.B C\-t :
Execute a ratpoison command
.PP
Further default key bindings can be found in parentheses
after the commands in the next section:
.SH COMMANDS AND DEFAULT ALIASES
.cmd abort ( C\-t C\-g )
Do nothing and that successfully.
(Useful if you pressed
\fBC\-t\fP in error).
.cmd addhook event command
Add a hook: Run command \fIcommand\fP whenever \fIevent\fP
is called.
Possible events are:
.ta 10
.br
\fBdeletewindow\fP	Run after a window is withdrawn.
.br
\fBnewwindow\fP	Run after a new window is mapped.
.br
\fBkey\fP	Run whenever a top level key is pressed.
(by default \fBC\-t\fP)
.br
\fBquit\fP	Run before exiting ratpoison.
.br
\fBrestart\fP	Run before restarting ratpoison.
.br
\fBswitchframe\fP	Run after a frame actually switched,
but before the window in it is focused.
.br
\fBswitchgroup\fP	Run after selecting a new group.
.br
\fBswitchwin\fP	Run after a new window is selected.
(With dedication,
it may already be inactive again, if it was put into another frame)
.cmd alias alias command
Add \fIalias\fP as new way to call \fIcommand\fP.
.cmd bind key command
alias for "\fBdefinekey root\fP \fIkey\fP \fIcommand\fP"
.cmd banish ( C\-t b )
Banish the rat cursor to the lower right corner of the screen.
.cmd banishrel
Banish the rat cursor to the lower right corner of the current window.
If there isn't a window in the current frame, it banishes the rat cursor
to the lower right corner of the frame.
.cmd chdir [ directory ]
If the optional argument is given, change the current directory
of ratpoison to \fIdirectory\fP.
If nothing is given, change
it to the value of the environment variable "HOME".
.cmd clrunmanaged
Clears the unmanaged window list.
.cmd cnext
Like \fBnext\fP but switch to the next window with another
resource class than the current one.
(That means the next window belonging to another type of application
 than the current one.)
.cmd cprev
Like \fBprev\fP but switch to the previous window with another
resource class than the current one.
(That means the previous window belonging to another type of application
 than the current one.)
.cmd colon ratpoison\-command ( C\-t : )
Execute \fIratpoison\-command\fP interactively. (i.e. ask for possible
missing arguments.)
.cmd compat
Add aliases for the new \fBset\fP commands starting with \fBdef\fP to support older
scripts.
.cmd cother
Like \fBother\fP but switch to the window of the current group that was last
accessed and has another resource class but is not currently visible.
.cmd curframe ( C\-t F )
Show a bar marking the current frame.
.cmd definekey keymap key command
Add a new key binding in \fIkeymap\fP for \fIkey\fP to execute \fIcommand\fP.
Default keymaps are \fBtop\fP normally only containing \fBC\-t\fP, which
reads a key from \fBroot\fP, containing all the normal commands.

Note that you have to describe ":" by "colon", "!" by "exclam" and so on.
If you cannot guess a name of a key, try either \fBC\-t\fP \fIkey\fP
and look at the error message, or try \fB:describekey root\fP and pressing
the key.
.cmd def...
When \fBcompat\fP was called there are some aliases starting with \fIdef\fP, which
alias the new form with \fBset\fP. I.e. instead of \fB defresizeunit\fP
better use the new \fBset resizeunit\fP and so on...
.cmd dedicate [ \fB0 | \fB1\fP ]
Consider the current frame dedicated/chaste (\fB1\fP) or promiscuous (\fB0\fP).
.br
A dedicated frame will not accept new windows.
When new windows are to be focused, they will be opened in a non-dedicated
frame instead.
.br
If no argument is given, toggle the current dedicateness. By default no
windows are dedicated.
.cmd delete ( C\-t k )
Close the current window.
.cmd delkmap keymap
Deletes the keymap named \fIkeymap\fP, that was generated
with \fBnewkmap\fP. The keymaps \fBtop\fP
(or whatever was specified by \fBset topkmap\fP) and \fBroot\fP
cannot be deleted.
.cmd describekey keymap
Grab the next key. Similar to \fBreadkey\fP, describekey
shows only the command in \fIkeymap\fP,
that would be executed by \fBreadkey\fP.
.cmd echo text
Show \fItext\fP as ratpoison message.
.cmd escape key
Update the default escape key to \fIkey\fP.
.br
Strictly speaking it updates the the \fBreadkey root\fP command
in the keymap \fBtop\fP to \fIkey\fP, the \fBother\fP binding
in \fBroot\fP to \fIkey\fP, and \fBmeta\fP binding in \fBroot\fP
to \fIkey\fP without modifiers or \fBC\-\fP\fIkey\fP if \fIkey\fP
has no modifiers.
(If \fBset topkmap\fP was called with an argument other than \fBtop\fP
that will be used instead of \fBtop\fP.)
.cmd exchangedown ( C\-t C\-Down )
Exchange the window in the current frame with the window in the frame below the current frame.
.cmd exchangeleft ( C\-t C\-Left )
Exchange the window in the current frame with the window in the frame left of the current frame.
.cmd exchangeright ( C\-t C\-Right )
Exchange the window in the current frame with the window in the frame right of the current frame.
.cmd exchangeup ( C\-t C\-Up )
Exchange the window in the current frame with the window in the frame above the current frame.
.cmd exec shell\-command ( C\-t ! )
Spawn a shell executing \fIshell\-command\fP.
.cmd execa shell\-command
Spawn a shell executing \fIshell\-command\fP, without remembering
the current frame, so that _NET_WM_PID declaring programs will be
placed into the frame active when they open a window instead of
the frame active when ratpoison gets this command.
.cmd execf frame shell\-command
Spawn a shell executing \fIshell\-command\fP, showing _NET_WM_PID
supporting programs in the given frame instead of the frame selected
when this program is run.
.cmd fdump [ screenno ]
Output the defining data for all frames of the current screen, or
for screen number \fIscreenno\fP if this is specified.
.cmd focus ( C\-t Tab )
Focus the next frame.
.cmd focuslast
Switch to the last selected focus.
.cmd focusleft ( C\-t Left )
Switch to the frame to the left of the current one.
.cmd focusdown ( C\-t Down )
Switch to the frame beneath the current one.
.cmd focusright ( C\-t Right )
Switch to the frame to the right of the current one.
.cmd focusprev
Focus the previous frame.
.cmd focusup ( C\-t Up )
Switch to the frame above the current one.
.cmd frestore frames
Replace the current frames with the ones specified in \fIframes\fP in the
format as generated by \fBfdump\fP.
.cmd fselect [ frameno ] ( C\-t f )
If an argument is supplied, switch to a frame given by number \fIframeno\fP.

If no argument is given, show a frame selector in each frame and wait for
a key to be pressed.
If the key matches an existing frame selector, this frame gets focused.

Frame selectors are by default the numbers starting with zero, but they
can be changed by \fBset\fPing \fBframesels\fP.
.cmd gdelete [ group ]
If the optional argument \fIgroup\fP is supplied, delete group
\fIgroup\fP. Otherwise delete the current group.
If the last
group is deleted, a new group with name \fBdefault\fP is created.
The group has to be empty, otherwise it cannot be deleted.
.cmd getenv variable
Output the value of the environment variable \fIvariable\fP.
.cmd getsel
Paste the current X Selection into the current window.
.cmd gmerge group
Move all windows from group \fIgroup\fP into the current group.
.cmd gmove group
Move the current window into group \fIgroup\fP.
.cmd gnew group
Create a new group with name \fIgroup\fP and select it.
Most window commands only see (and thus select, consider next,
previous or last) windows within the group active when they are
issued.
.cmd gnewbg group
Create a new group named \fIgroupf\fP, but do not select it.
.cmd gnext
Select the next group. Most window commands only see windows in the
effective group.
.cmd gother
Select the last accessed group. Most window commands only see windows in the
effective group.
.cmd gprev
Select the prior group. Most window commands only see windows in the
effective group.
.cmd gravity [ \fBnw | \fBw | \fBsw | \fBn | \fBc | \fBs | \fBne | \fBe | \fBse ]
Change how in its frame the current window is aligned.
.cmd grename
Rename current group.
.cmd groups
Output a list of all groups with their number.
.cmd gselect group
Select the group names \fIgroup\fP.
.cmd help [ keymap ]
If the optional parameter \fIkeymap\fP is given,
list all keybindings in this keymap,
otherwise list all key bindings in keymap \fIroot\fP.
.cmd hsplit [ l\fB/\fR\fIp | "pixels from left" | "\fB\-\fR\fIpixels from right" ] ( C\-t S )
Split the current frame into left frame and a right frame.
If no parameter is given, split in halves.
If two numbers separated
by a slash\ ("\fB/\fP") are given, the left one is \fIl\fP times the \fIp\fPth part
and the right one (\fIp\fP\-\fIl\fP) times the \fIp\fPth part of the prior width.
Otherwise the right one is \fIpixels from right\fP wide or the left one
\fIpixels from left\fP wide, depending whether there is \fB\-\fP in front of
the number or not.
.cmd inext
Like \fBnext\fP but switch to the next window with the same
resource class as the current one.
(That means the next window belonging to the same application
 as the current one.)
.cmd info ( C\-t i )
Output the current the width, height, window number and window name of the current
window.
(What name means is chosen by "\fBset\ winname\fP".)
.cmd iprev
Like \fBprev\fP but switch to the previous window with the same
resource class as the current one.
(That means the previous window belonging to the same application
 as the current one.)
.cmd iother
Like \fBother\fP but switch to the window of the current group that was last
accessed and has the same resource class but is not currently visible.
.cmd kill ( C\-t K )
Close the X\-connection of the X\-client responsible for the current window.
.cmd lastmsg ( C\-t m )
Reshow the last message.
.cmd license ( C\-t V )
Show ratpoison's license.
.cmd link key [ keymap ]
Do what \fIkey\fP is bound to in the keymap \fIkeymap\fP if supplied.
Otherwise what \fIkey\fP is bound to in keymap \fBroot\fP.
.cmd listhook event
List all commands specified with \fBaddhook\fP to be executed when
even \fIevent\fP occurs.
.cmd meta [ key ] ( C\-t t )
Send the escape key (that which normally is \fBC\-t\fP) to the current window.
If a \fIkey\fP is specified, this is sent instead. Note that some applications by
default ignore the synthetic key that is sent using this command as it
is considered a security hole. xterm is one such application.
.cmd msgwait [ seconds ]
Set the duration the message window is shown.
If \fIseconds\fP is zero, wait infinitely.
.cmd newkmap keymap
Generate a new keymap names \fIkeymap\fP. This keymap can
be used to add new key\-command mapping to it with \fBdefinekey\fP
and can be called with \fBreadkey\fP.
.cmd newwm new window manager
Quit ratpoison and execute \fInew window manager\fP instead.
.cmd next ( C\-t Return | C\-t n | C\-t space )
Switch to the next window in the current group.
.cmd nextscreen ( C\-t N )
Switch to the next screen. (If you have multiple physical ones.)
.cmd number new [ old ]
Give the number \fInew\fP to the window with the number \fIold\fP or
the current window.
.cmd only ( C\-t Q )
Remove all frames on the current screen except the current frame and
maximize this one to the size of the whole screen.
.cmd other ( C\-t C\-t )
Switch to the window of the current group that was last
accessed but is not currently visible.
.cmd prev ( C\-t p )
Switch to the previous window in the current group.
.cmd prevscreen ( C\-t P )
Switch to the previous screen. (If you have multiple physical ones.)
.cmd prompt [ prompt ]
Ratpoison will ask the user for input, showing \fIprompt\fP (or
a single colon, if no argument is given) and output the input the
user has made.
.br
Note that this command probably does not make much sense in interactive
mode.
.cmd putsel x\-selection
Replace the X selection with the text \fIx\-selection\fP. It can be
inserted into the current window with \fBgetsel\fP.
.cmd quit
Quit ratpoison.
.cmd ratinfo
Display the x y coordinates of the rat cursor relative to the screen.
.cmd ratrelinfo
Display the x y coordinates of the rat cursor relative to the current window or current frame if no window is focused
.cmd ratwarp x y
Move the rat cursor to the position (\fIx\fP,\fIy\fP).
.cmd ratrelwarp deltax deltay
Move the rat cursor to (\fIdeltax\fP,\fIdeltay\fP), relative
to the current position.
.cmd ratclick [ button ]
Simulate a rat click with \fIbutton\fP (button 1=left button if none given).
.cmd rathold \fBup\fR\fI | \fBdown\fR\fI  [ button ]
Simulate pressing|releasing rat button \fIbutton\fP (1=left button if none given).
.cmd readkey keymap
Grab the next key pressed, and execute the command associated to this key
in \fIkeymap\fP.
To show it is waiting for a key, ratpoison will change the
rat cursor to a square if \fBwaitcursor\fP is set.

This command is perhaps best described with its usage in the default
configuration: By pressing \fBC\-t\fP, which is the only key in the keymap
\fBtop\fP, the command "\fBreadkey root\fP" is executed. The next key
then executes the command in keymap \fBroot\fP belonging to this command.
.cmd redisplay ( C\-t l )
Extend the current window to the whole size of its current frame and
redisplay it.
(Useful to redisplay normal windows or bring transient windows to the
full size of the frame as only normal windows are maximized by ratpoison)
.cmd redo ( C\-t U )
Revert the last \fIundo\fP of frame changes.
.cmd remhook event command
Remove command \fIcommand\fP from the list of commands to be called when
event \fIevent\fP is hit. (The command has to specified, as an event can
have multiple commands attached to it.)
Use "\fBlisthook\fP \fIhook\fP" to get a list of all attached commands.
.cmd remove ( C\-t R )
Remove the current frame and extend some frames around to fill the remaining
gap.
.cmd resize [ deltax deltay ] ( C\-t r )
If \fIdeltax\fP and \fIdeltay\fP are supplied, resize the current frame
by that (i.e. move the bottom right corner by the given offsets and then
move this frame and resize adjacent frames to make the frames fill the
whole screen again.)

If in interactive mode no arguments are supplied, resize the current
frame interactively:
.br
.ta 20
\fBReturn\fP:	finish resizing
.br
\fBC\-g\fP or \fBEscape\fP:	abort resizing
.br
\fBC\-n\fP or \fBDown\fP or \fBj\fP:	grow vertically
.br
\fBC\-p\fP or \fBUp\fP or \fBk\fP:	shrink vertically
.br
\fBC\-f\fP or \fBRight\fP or \fBl\fP:	grow horizontally
.br
\fBC\-b\fP or \fBUp\fP or \fBh\fP:	shrink horizontally
.br
\fBs\fP:	shrink to size of current window

While resizing interactively, changes are in multiples of the amount
of pixels given by \fBset resizeunit\fP (by default 10).
.cmd restart
Restart ratpoison.
.cmd rudeness [ rudeness ]
Show or set what kind of windows are allowed to jostle into the foreground.

\fIrudeness\fP is a bitwise or of the following values:
.ta 5
.br
1	Transient windows may raise.
.br
2	Normal windows may raise.
.br
4	New transient windows end up in the foreground.
.br
8	New normal windows end up in the foreground.

Default is all allowed i.e.\& 15.

.cmd sdump
Output the list of all screens.
The screens are separated by commas. Each screen is shown as 6 values:
its number, its x\-coordinate, its y\-coordinate, its width, its height
and if it is currently selected (1=true,0=false).
.cmd select \fB\-\fP | name | nr ( C\-t ' )
If a number is given, switch to the window with number \fInr\fP.
If a name is given, switch to the window in the current group with
name \fIname\fP.
Blank the current frame, if \fB\-\fP is given.
.cmd set [ variable [ value ] ]
If no argument is given, output all ratpoison variables and their values.
.br
If one argument is given, output the value of ratpoison variable \fIvariable\fP.
.br
Otherwise set ratpoison variable \fIvariable\fP to \fIvalue\fP. What values
are valid depends on the variable.
See the section \fBVARIABLES\fP later in this document for details.
.cmd setenv variable value
Set the environment variable \fIvariable\fP to \fIvalue\fP.
(Environment variables will be passed to all programs started from ratpoison.)
.cmd sfdump
Output all frames similar to \fBfdump\fP, but not limited to one screen, but
all screens at once and with the screen number after each frame.
.cmd sfrestore
Replace the current frames with the ones specified in \fIframes\fP in the
format as generated by \fBsfdump\fP.
.cmd shrink
Shrink the current frame to the size of the current window with in.
.cmd split [ split ] ( C\-t s )
alias for \fBvsplit\fP
.cmd source file
Read \fIfile\fP and execute each line as ratpoison command.
.cmd sselect screennumber
Switch to the screen \fIscreennumber\fP. (If you have multiple physical ones.)
.cmd startup_message \fBon | \fBoff
Select whether ratpoison will show a startup message or not.
.cmd swap [ dest-frame [ src-frame ] ] ( C\-t x )
Exchange the window in \fIsrc-frame\fP (or the current frame if there is no second
argument) with the window \fIdest-frame\fP (or ask interactively which frame to
swap with if there is no argument).
.cmd time ( C\-t a )
Output current data and time.
.cmd title newname ( C\-t A )
Overwrite the title of the current window with \fInewname\fP.
All following ratpoison commands will only know the
window under the new name.
.cmd tmpwm tmpwm
Temporarily give control over to the other window manager \fItmpwm\fP,
reclaiming control when that WM terminates.
.cmd unalias alias
Remove the alias \fIalias\fP.
.cmd unbind key
alias for "\fBundefinekey root\fP \fIkey\fP"
.cmd undefinekey keymap key
Remove the binding for \fIkey\fP from \fIkeymap\fP.
.cmd undo ( C\-t _ or C\-t u )
Un\-do the last change to the frameset.
(Like splitting, resizing, deleting, ...)
.br
The amount of steps that can be undone is specified by the variable
\fBmaxundos\fP.
.cmd unmanage [ name ]
Add \fIname\fP to the list of unmanaged windows.
Thus, windows of this
name will not be managed but allowed to choose their position themselves.

In non\-interactive mode calling it without arguments will print the list.

The list can be cleared again by calling \fBclrunmanaged\fP.
.cmd unsetenv variable
Remove variable \fIvariable\fP from the list of environment variables.
.cmd verbexec cmdline
Spawn a shell executing \fIcmdline\fP after showing a message with the command.
.cmd version ( C\-t v )
Output version and compile time information.
.cmd vsplit [ l\fB/\fR\fIp | "pixels from top" | "\fB\-\fR\fIpixels from bottom" ] ( C\-t s )
Split the current frame into upper frame and a lower frame.
If no parameter is given, split in halves.
If two numbers separated
by a slash\ ("\fB/\fP") are given, the upper one is \fIl\fP times the \fIp\fPth part
and the lower one (\fIp\fP\-\fIl\fP) times the \fIp\fPth part of the prior height.
Otherwise the lower one is \fIpixels from bottom\fP wide or the upper one
\fIpixels from top\fP high, depending whether there is a \fB\-\fP in front of
the number or not.
.cmd warp [ \fBon | \fBoff ]
Select if focusing a window moves the rat cursor to the place it had been last
time this window was focused, or not.
.cmd windows [ format ] ( C\-t w )
In interactive mode,
show the list of all windows in the current group for
the duration specified by \fBmsgwait\fP
If \fBmsgwait\fP is zero, toggle between indefinitely showing
and not showing.

The messages are shown in columns or rows depending on the \fBset\fPting
of \fBwinliststyle\fP in the format set by \fBset winfmt\fP.
The following substitutions happen in format:
.br
%a by the application name (resource name),
.br
%c by the resource class,
.br
%f by the frame number,
.br
%g by the gravity of the window,
.br
%h by the height of the window,
.br
%H by the unit to resize the window vertically (height_inc)
.br
%i by the X Window ID,
.br
%p by the process ID,
.br
%l by the last access number,
.br
%M by the string \fBMaxsize\fP, if it specifies a maximum size,
.br
%n by the window number,
.br
%s by window status (\fB*\fP is active window,
\fB+\fP would be chosen by \fBother\fP, \fB\-\fP otherwise)
.br
%S by the screen number
.br
%t by the window name (see \fBset winname\fP),
.br
%T by the string \fBTransient\fP, if it is a transient window
.br
%w by the width of the window
.br
%W by the unit to resize the window horizontally (width_inc)
.br
%x by the xine screen number
and
.br
%% by a single %

Additionally there can be a positive decimal integer number between the
percent sign and the format string to specify the length this value
should be truncated to if longer.
(For example: \fB%20t\fP)

In non\-interactive mode, output the list of windows in the current group
line by line. The format string can be overwritten by the optional parameter
\fIformat\fP.
.SH VARIABLES
Ratpoison variables can be shown and set with \fBset\fP.
There are:
.var resizeunit pixels
Set the amount of pixels interactive \fBresize\fPing will add/subtract
in each step.
.br
Default is 5.
.var maxundos number
The maximal amount of step ratpoison can undo with the \fBundo\fP command.
.br
Default is 20.
.var wingravity \fBnw | \fBw | \fBsw | \fBn | \fBc | \fBs | \fBne | \fBe | \fBse
Set the default gravity new normal windows will get.
Possible values are the same as in the \fBgravity\fP command, which changes
the gravity of an existing window: cardinal points or numbers 1 to 9.
.br
Default is \fBnorthwest\fP.
.var maxsizegravity \fBnw | \fBw | \fBsw | \fBn | \fBc | \fBs | \fBne | \fBe | \fBse
Set the default gravity new self\-maximized windows will get.
Possible values are the same as in the \fBgravity\fP command, which changes
the gravity of an existing window: cardinal points or numbers 1 to 9.
.br
Default is \fBcenter\fP.
.var transgravity \fBnw | \fBw | \fBsw | \fBn | \fBc | \fBs | \fBne | \fBe | \fBse
Set the default gravity new transient windows will get.
Possible values are the same as in the \fBgravity\fP command, which changes
the gravity of an existing window: cardinal points or numbers 1 to 9.
.br
Default is \fBcenter\fP.
.var bargravity \fBnw | \fBw | \fBsw | \fBn | \fBc | \fBs | \fBne | \fBe | \fBse
Select the location where message and prompt bars appear.
.br
Default is \fBnortheast\fP.
.var font font
Make ratpoison use font \fIfont\fP.
.var padding left top right bottom
Set how much space at the borders of the screen will not be used.
.br
Default is 0 0 0 0.
.var border pixels
Selects how thick the frame around windows is.
.br
Default is 1.
.var barborder pixels
Selects how thick the frame around ratpoison's prompt or message windows is.
.br
Default is 1.
.var inputwidth pixels
Determine the width of the input window.
.br
Default is 200.
.var barinpadding \fB0 | \fB1
If there is padding, determines whether the bar appears at the edge of the
screen (\fB1\fP) or at the edge of the window area (\fB0\fP).
.br
Default is 0.
.var topkmap kmap
Make \fIkmap\fP the top keymap ratpoison grabs directly.
The default value is \fBtop\fP.
.var waitcursor \fB0 | \fB1
Determine whether to change the rat cursor when waiting for a key
(\fB1\fP) or not (\fB0\fP).
(see \fBreadkey\fP and \fBdescribekey\fP).
.br
Default is 1.
.var winfmt format
Choose the default format for the the \fBwindows\fP command.
.br
Default is %n%s%t.
.var winname \fBtitle | \fBname | \fBclass
Choose what is considered the "name" of the window by ratpoison:
.ta 7
\fBtitle\fP	The title of the window.
.br
\fBname\fP	The resource name of the window.
.br
\fBclass\fP	The resource class i.e. the name of the application.
.br
Default is \fBtitle\fP.
.var fgcolor color
The foreground color of the windows ratpoison creates.
.br
Default is black.
.var bgcolor color
The background color of the windows ratpoison creates.
.br
Default is white.
.var fwcolor color
The border color of the focused window.
.br
Default is black.
.var bwcolor color
The border color of unfocused windows.
.br
Default is black.
.var barpadding x y
Set horizontal padding of ratpoison windows to \fIx\fP and vertical
padding to \fIy\fP.
.br
Default is 4 0
.var winliststyle \fBrow | \fBcolumn
Determines whether windows are shown in \fBrow\fPs or in \fBcolumn\fPs.
.br
Default is column.
.var framesels selectors
Override the frame selectors \fBfselect\fP uses.
The first character is the selector for the first frame,
the second character is the selector for the second frame and so on.

Using this variable, one can directly access more than 10 frames.

Default is an empty string, which is equivalent to "0123456789".
.var historysize number
Specify maximum number of values kept in input history.

Default is 20.
.var historycompaction \fB0 | \fB1
Decide if new input lines added to history delete
older equal lines from history.

Default is 1 (on).
.var historyexpansion \fB0 | \fB1
Decide if history expansion using ! is available.
(Can only be activated when compiled with readline's libhistory.)

Default is 0 (off).
.SH AUTHOR
Upstream Author is Shawn Betts <sabetts@vcn.bc.ca>.
.br
See /usr/share/doc/ratpoison/AUTHORS for other contributors.
.P
This manual page was written by Bernhard R. Link <brlink@debian.org>.
